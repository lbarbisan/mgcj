import = import java.io.UnsupportedEncodingException;\nimport java.util.Enumeration;\nimport java.util.Properties;\nimport opencard.cflex.service.CFlex32CardService;\nimport opencard.core.service.CardRequest;\nimport opencard.core.service.CardServiceException;\nimport opencard.core.service.SmartCard;\nimport opencard.core.terminal.CardTerminal;\nimport opencard.core.terminal.CardTerminalException;\nimport opencard.core.terminal.CardTerminalRegistry;\nimport opencard.core.util.HexString;\nimport opencard.core.util.OpenCardPropertyLoadingException;\nimport org.omg.CORBA.ORB;\nimport org.omg.CosNaming.NameComponent;\nimport org.omg.CosNaming.NamingContextExt;\nimport org.omg.CosNaming.NamingContextExtHelper;\nimport org.omg.PortableServer.POA;\nimport org.omg.PortableServer.POAHelper;\nimport org.omg.PortableServer.Servant;\n
server = toto
server_first_part =	public static void main(String[] args) throws Exception {\n\
		Properties props = new Properties();\n\
		props.put("org.omg.CORBA.ORBInitialHost", "localhost");\n\
		props.put("org.omg.CORBA.ORBInitialPort", "1234");\n\
\n\
		ORB orb = ORB.init(args, props);\n\
\n\
		POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));\n\
		NamingContextExt context = NamingContextExtHelper.narrow(orb.resolve_initial_references("NameService"));\n\
\n\
		//on demarre l'applet\n\
		startApplet(DEFAULT_APPLET_ID);
server_second_part = context.rebind(name, rootPOA.id_to_reference(servantID));\n\
\n\
		rootPOA.the_POAManager().activate();\n\
		System.out.println("server is running");\n\
		orb.run();\n\
	}
otherMethods = 	private static boolean startApplet(String applet_id) throws CardTerminalException,\n\
	OpenCardPropertyLoadingException, CardServiceException,\n\
	ClassNotFoundException, UnsupportedEncodingException {\n\
		if (SmartCard.isStarted() == false) {\n\
			SmartCard.start();\n\
		}\n\
\n\
		CardTerminalRegistry ctr = CardTerminalRegistry.getRegistry();\n\
		for (Enumeration terminals = ctr.getCardTerminals(); terminals\n\
				.hasMoreElements();) {\n\
			CardTerminal terminal = (CardTerminal) terminals.nextElement();\n\
			int slots = Server.printTerminalInfos(terminal);\n\
			for (int j = 0; j < slots; j++) {\n\
				Server.printSlotInfos(terminal, j);\n\
			}\n\
		}\n\
		System.out.println("Insert your card ...");\n\
		CardRequest cr = new CardRequest(CardRequest.ANYCARD, null, null);\n\
		SmartCard sm = SmartCard.waitForCard(cr);\n\
		javacard = (CFlex32CardService) sm.getCardService(\n\
				CFlex32CardService.class, true);\n\
		javacard.selectApplication(HexString.parseHexString(applet_id));\n\
		javacard.allocateChannel();\n\
		return true;\n\
	}\n\
\n\
	private static int printTerminalInfos(CardTerminal terminal) {\n\
		// First of all print all information stored about this reader\n\
		System.err.println("Address: " + terminal.getAddress() + "\n"\n\
				+ "Name:    " + terminal.getName() + "\n" + "Type:    "\n\
				+ terminal.getType() + "\n" + "Slots:   " + terminal.getSlots()\n\
				+ "\n");\n\
		return terminal.getSlots();\n\
	}\n\
\n\
	private static void printSlotInfos(CardTerminal terminal, int aSlotID) {\n\
		try {\n\
			// First print the ID of the slot\n\
			System.err.println("Info for slot ID: " + aSlotID);\n\
			if (terminal.isCardPresent(aSlotID)) {\n\
				System.err.println("card present: yes");\n\
				// If there is a card in the slot print the ATR the OCF got form this\n\
				// card\n\
				System.err.println("ATR: "\n\
						+ HexString\n\
								.hexify(terminal.getCardID(aSlotID).getATR()));\n\
				// As we do not have a driver for this card we cannot interpret this ATR\n\
			} else\n\
				System.err.println("card present: no");\n\
		} catch (CardTerminalException e) {\n\
			e.printStackTrace();\n\
		}\n\
	}\n\